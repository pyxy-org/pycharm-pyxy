/* The following code was generated by JFlex 1.4.3 on 6/29/24, 1:52 PM */

package org.pyxy.pyxycharm.lang.highlighter;

import com.intellij.lexer.FlexLexer;
import com.intellij.openapi.diagnostic.Logger;
import com.intellij.openapi.util.text.StringUtil;
import com.intellij.psi.tree.IElementType;
import com.jetbrains.python.PyTokenTypes;

import java.util.Stack;


// NOTE: JFlex lexer file is defined in http://www.jflex.de/manual.pdf


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/29/24, 1:52 PM from the specification file
 * <tt>src/com/christofferklang/pyxl/parsing/Pyxl.flex</tt>
 */
class _PyxlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PENDING_PYXL_TAG_FROM_PYXL = 12;
  public static final int PENDING_DOCSTRING = 26;
  public static final int IN_PYXL_PYTHON_EMBED = 8;
  public static final int IN_PYXL_TAG_NAME = 6;
  public static final int IN_ATTRVALUE = 22;
  public static final int ATTR_VALUE_2Q = 18;
  public static final int IN_PYXL_BLOCK = 4;
  public static final int IN_CLOSE_TAG = 24;
  public static final int IN_PYXL_DOCUMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int IN_DOCSTRING_OWNER = 28;
  public static final int IN_ATTR = 20;
  public static final int ATTR_VALUE_1Q = 16;
  public static final int PENDING_PYXL_TAG_FROM_PYTHON = 10;
  public static final int ATTR_VALUE_UNQUOTED = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\45\1\46\1\0\1\75\1\13\22\0\1\72\1\61\1\44"+
    "\1\12\1\0\1\106\1\107\1\42\1\113\1\114\1\105\1\35\1\50"+
    "\1\47\1\32\1\57\1\1\1\5\6\3\2\2\1\22\1\100\1\56"+
    "\1\73\1\60\1\0\1\115\1\67\1\27\1\37\1\62\1\34\1\25"+
    "\3\23\1\36\1\23\1\30\2\23\1\7\1\65\1\23\1\40\1\23"+
    "\1\63\1\40\2\23\1\26\1\64\1\23\1\66\1\43\1\70\1\111"+
    "\1\23\1\71\1\4\1\10\1\14\1\16\1\33\1\77\1\21\1\104"+
    "\1\17\1\36\1\101\1\11\1\102\1\20\1\15\1\51\1\23\1\52"+
    "\1\54\1\53\1\41\1\23\1\103\1\6\1\55\1\23\1\74\1\110"+
    "\1\76\1\112\53\0\1\24\12\0\1\24\4\0\1\24\5\0\27\24"+
    "\1\0\7\24\30\24\1\0\10\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\2\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\2\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\2\24\1\24\1\24\1\24\1\24\3\24\2\24"+
    "\1\24\1\24\1\24\2\24\1\24\3\24\2\24\4\24\1\24\2\24"+
    "\1\24\3\24\3\24\2\24\1\24\2\24\1\24\1\24\1\24\1\24"+
    "\1\24\2\24\1\24\1\24\2\24\1\24\1\24\2\24\1\24\3\24"+
    "\1\24\1\24\1\24\2\24\2\24\1\24\1\24\3\24\4\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\2\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\2\24\1\24\1\24\1\24\1\24\1\24\3\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\7\24\2\24\1\24\2\24"+
    "\2\24\1\24\1\24\4\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\105\24\1\24\33\24\22\24\4\0\14\24\16\0\5\24"+
    "\7\0\1\24\1\0\1\24\21\0\160\31\1\24\1\24\1\24\1\24"+
    "\1\24\1\0\1\24\1\24\2\0\1\24\3\24\1\0\1\24\6\0"+
    "\1\24\1\0\3\24\1\0\1\24\1\0\2\24\1\24\21\24\1\0"+
    "\11\24\43\24\1\24\2\24\3\24\3\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\5\24"+
    "\1\24\1\24\1\0\1\24\1\24\2\24\2\24\63\24\60\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\0\5\31\2\0\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\2\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\2\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\0\46\24\2\0\1\24\6\0\51\24\10\0\55\31\1\0\1\31"+
    "\1\0\2\31\1\0\2\31\1\0\1\31\10\0\33\24\4\0\4\24"+
    "\35\0\13\31\5\0\40\24\1\24\12\24\25\31\12\31\4\0\2\24"+
    "\1\31\143\24\1\0\1\24\7\31\2\0\6\31\2\24\2\31\1\0"+
    "\4\31\2\24\12\31\3\24\2\0\1\24\20\0\1\24\1\31\36\24"+
    "\33\31\2\0\131\24\13\31\1\24\16\0\12\31\41\24\11\31\2\24"+
    "\4\0\1\24\2\0\1\31\2\0\26\24\4\31\1\24\11\31\1\24"+
    "\3\31\1\24\5\31\22\0\31\24\3\31\4\0\13\24\5\0\30\24"+
    "\1\0\6\24\11\0\10\31\51\24\1\24\30\31\1\0\40\31\1\31"+
    "\66\24\1\31\1\31\1\31\1\24\3\31\10\31\4\31\1\31\2\31"+
    "\1\24\7\31\12\24\2\31\2\0\12\31\1\0\1\24\17\24\1\31"+
    "\2\31\1\0\10\24\2\0\2\24\2\0\26\24\1\0\7\24\1\0"+
    "\1\24\3\0\4\24\2\0\1\31\1\24\3\31\4\31\2\0\2\31"+
    "\2\0\2\31\1\31\1\24\10\0\1\31\4\0\2\24\1\0\3\24"+
    "\2\31\2\0\12\31\2\24\12\0\1\24\1\0\1\31\2\0\2\31"+
    "\1\31\1\0\6\24\4\0\2\24\2\0\26\24\1\0\7\24\1\0"+
    "\2\24\1\0\2\24\1\0\2\24\2\0\1\31\1\0\3\31\2\31"+
    "\4\0\2\31\2\0\3\31\3\0\1\31\7\0\4\24\1\0\1\24"+
    "\7\0\12\31\2\31\3\24\1\31\13\0\2\31\1\31\1\0\11\24"+
    "\1\0\3\24\1\0\26\24\1\0\7\24\1\0\2\24\1\0\5\24"+
    "\2\0\1\31\1\24\3\31\5\31\1\0\2\31\1\31\1\0\2\31"+
    "\1\31\2\0\1\24\17\0\2\24\2\31\2\0\12\31\11\0\1\24"+
    "\6\31\1\0\1\31\2\31\1\0\10\24\2\0\2\24\2\0\26\24"+
    "\1\0\7\24\1\0\2\24\1\0\5\24\2\0\1\31\1\24\1\31"+
    "\1\31\1\31\4\31\2\0\2\31\2\0\2\31\1\31\7\0\2\31"+
    "\1\31\4\0\2\24\1\0\3\24\2\31\2\0\12\31\1\0\1\24"+
    "\20\0\1\31\1\24\1\0\6\24\3\0\3\24\1\0\4\24\3\0"+
    "\2\24\1\0\1\24\1\0\2\24\3\0\2\24\3\0\3\24\3\0"+
    "\14\24\4\0\2\31\1\31\2\31\3\0\3\31\1\0\3\31\1\31"+
    "\2\0\1\24\6\0\1\31\16\0\12\31\20\0\1\31\3\31\1\31"+
    "\10\24\1\0\3\24\1\0\27\24\1\0\20\24\2\0\1\31\1\24"+
    "\3\31\4\31\1\0\3\31\1\0\4\31\7\0\2\31\1\0\3\24"+
    "\2\0\1\24\2\0\2\24\2\31\2\0\12\31\20\0\1\24\1\31"+
    "\2\31\1\0\10\24\1\0\3\24\1\0\27\24\1\0\12\24\1\0"+
    "\5\24\2\0\1\31\1\24\1\31\1\31\5\31\1\0\1\31\2\31"+
    "\1\0\2\31\2\31\7\0\2\31\6\0\2\24\1\0\2\24\2\31"+
    "\2\0\12\31\1\0\2\24\1\31\14\0\2\31\2\31\11\24\1\0"+
    "\3\24\1\0\51\24\2\31\1\24\3\31\4\31\1\0\3\31\1\0"+
    "\3\31\1\31\1\24\5\0\3\24\1\31\7\0\3\24\2\31\2\0"+
    "\12\31\12\0\6\24\1\0\1\31\2\31\1\0\22\24\3\0\30\24"+
    "\1\0\11\24\1\0\1\24\2\0\7\24\3\0\1\31\4\0\3\31"+
    "\3\31\1\0\1\31\1\0\10\31\6\0\12\31\2\0\2\31\15\0"+
    "\60\24\1\31\2\24\7\31\5\0\6\24\1\24\10\31\1\0\12\31"+
    "\47\0\2\24\1\0\1\24\1\0\5\24\1\0\30\24\1\0\1\24"+
    "\1\0\12\24\1\31\2\24\11\31\1\24\2\0\5\24\1\0\1\24"+
    "\1\0\7\31\1\0\12\31\2\0\4\24\40\0\1\24\27\0\2\31"+
    "\6\0\12\31\13\0\1\31\1\0\1\31\1\0\1\31\4\0\2\31"+
    "\10\24\1\0\44\24\4\0\16\31\1\31\5\31\1\0\2\31\5\24"+
    "\13\31\1\0\44\31\11\0\1\31\71\0\53\24\2\31\4\31\1\31"+
    "\6\31\1\31\2\31\2\31\2\31\1\24\12\31\6\0\6\24\2\31"+
    "\2\31\4\24\3\31\1\24\3\31\2\24\7\31\3\24\4\31\15\24"+
    "\1\31\2\31\2\31\6\31\1\31\1\24\1\31\12\31\3\31\1\31"+
    "\2\0\46\24\1\0\1\24\5\0\1\24\2\0\53\24\1\0\1\24"+
    "\3\24\u0149\24\1\0\4\24\2\0\7\24\1\0\1\24\1\0\4\24"+
    "\2\0\51\24\1\0\4\24\2\0\41\24\1\0\4\24\2\0\7\24"+
    "\1\0\1\24\1\0\4\24\2\0\17\24\1\0\71\24\1\0\4\24"+
    "\2\0\103\24\2\0\3\31\40\0\20\24\20\0\126\24\2\0\6\24"+
    "\3\0\u026c\24\2\0\21\24\1\0\32\24\5\0\113\24\3\0\3\24"+
    "\10\24\7\0\22\24\3\31\1\31\11\0\23\24\2\31\1\31\13\0"+
    "\22\24\2\31\14\0\15\24\1\0\3\24\1\0\2\31\14\0\64\24"+
    "\2\31\1\31\7\31\10\31\1\31\2\31\13\31\3\0\1\24\4\0"+
    "\1\24\1\31\2\0\12\31\41\0\3\31\1\0\1\31\12\31\6\0"+
    "\43\24\1\24\65\24\7\0\5\24\2\31\42\24\1\31\1\24\5\0"+
    "\106\24\12\0\37\24\1\0\3\31\4\31\2\31\3\31\4\0\2\31"+
    "\1\31\6\31\3\31\12\0\12\31\36\24\2\0\5\24\13\0\54\24"+
    "\4\0\32\24\6\0\12\31\46\0\27\24\2\31\2\31\1\31\4\0"+
    "\65\24\1\31\1\31\1\31\7\31\1\0\1\31\1\31\1\31\2\31"+
    "\10\31\6\31\12\31\2\0\1\31\12\31\6\0\12\31\15\0\1\24"+
    "\10\0\16\31\1\0\20\31\61\0\4\31\1\31\57\24\1\31\1\31"+
    "\5\31\1\31\1\31\5\31\1\31\2\31\10\24\3\0\12\31\21\0"+
    "\11\31\14\0\2\31\1\31\36\24\1\31\4\31\2\31\2\31\1\31"+
    "\3\31\2\24\12\31\54\24\1\31\1\31\2\31\3\31\1\31\1\31"+
    "\3\31\2\31\14\0\44\24\10\31\10\31\2\31\2\31\10\0\12\31"+
    "\3\0\3\24\12\31\36\24\6\24\2\0\11\24\7\0\53\24\2\0"+
    "\3\24\20\0\3\31\1\0\15\31\1\31\7\31\4\24\1\31\6\24"+
    "\1\31\2\24\1\31\2\31\1\24\5\0\54\24\77\24\15\24\1\24"+
    "\42\24\45\24\100\31\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\11\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\11\24\10\24\6\24\2\0\6\24\2\0\10\24\10\24\10\24\10\24"+
    "\6\24\2\0\6\24\2\0\10\24\1\0\1\24\1\0\1\24\1\0"+
    "\1\24\1\0\1\24\10\24\10\24\16\24\2\0\10\24\10\24\10\24"+
    "\10\24\10\24\10\24\5\24\1\0\2\24\4\24\1\24\1\0\1\24"+
    "\3\0\3\24\1\0\2\24\4\24\1\24\3\0\4\24\2\0\2\24"+
    "\4\24\4\0\10\24\5\24\5\0\3\24\1\0\2\24\4\24\1\24"+
    "\102\0\2\31\23\0\1\31\34\0\1\24\15\0\1\24\20\0\15\24"+
    "\63\0\15\31\4\0\1\31\3\0\14\31\21\0\1\24\4\0\1\24"+
    "\2\0\1\24\3\24\2\24\3\24\1\24\1\0\1\24\3\0\5\24"+
    "\6\0\1\24\1\0\1\24\1\0\1\24\1\0\4\24\1\0\1\24"+
    "\4\24\1\24\4\24\1\24\2\0\2\24\2\24\5\0\1\24\4\24"+
    "\4\0\1\24\21\0\43\24\1\24\1\24\4\24\u0a77\0\60\24\60\24"+
    "\1\24\1\24\3\24\2\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\4\24\1\24\1\24\2\24\1\24\6\24\2\24\3\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\2\24\6\0\1\24\1\24"+
    "\1\24\1\24\3\31\1\24\1\24\14\0\46\24\1\0\1\24\5\0"+
    "\1\24\2\0\70\24\7\0\1\24\17\0\1\31\27\24\11\0\7\24"+
    "\1\0\7\24\1\0\7\24\1\0\7\24\1\0\7\24\1\0\7\24"+
    "\1\0\7\24\1\0\7\24\1\0\40\31\57\0\1\24\u01d5\0\1\24"+
    "\1\24\1\24\31\0\11\24\4\31\2\31\1\0\5\24\2\0\3\24"+
    "\1\24\1\24\4\0\126\24\2\0\2\31\2\0\2\24\1\24\1\0"+
    "\132\24\1\0\3\24\1\24\5\0\53\24\1\0\136\24\21\0\40\24"+
    "\60\0\20\24\u0200\0\u19c0\24\100\0\u5215\24\1\24\u0477\24\103\0\50\24"+
    "\6\24\2\0\u010c\24\1\24\3\0\20\24\12\31\2\24\24\0\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\31\4\0\12\31\1\0"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\2\24"+
    "\2\31\106\24\12\24\2\31\45\0\11\24\2\0\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\3\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\10\24\1\24\1\24\1\24\1\24\2\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\2\0\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\3\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\5\24\1\24\5\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\4\24\1\24"+
    "\1\24\1\24\5\0\1\24\1\24\1\0\1\24\1\0\1\24\1\24"+
    "\1\24\1\24\1\24\30\0\3\24\1\24\1\24\1\24\2\24\1\24"+
    "\7\24\1\31\3\24\1\31\4\24\1\31\27\24\2\31\2\31\1\31"+
    "\4\0\1\31\23\0\64\24\14\0\2\31\62\24\20\31\2\31\12\0"+
    "\12\31\6\0\22\31\6\24\3\0\1\24\1\0\2\24\1\31\12\31"+
    "\34\24\10\31\2\0\27\24\13\31\2\31\14\0\35\24\3\0\3\31"+
    "\1\31\57\24\1\31\2\31\4\31\2\31\2\31\3\31\16\0\1\24"+
    "\12\31\6\0\5\24\1\31\1\24\11\24\12\31\5\24\1\0\51\24"+
    "\6\31\2\31\2\31\2\31\2\31\11\0\3\24\1\31\10\24\1\31"+
    "\1\31\2\0\12\31\6\0\20\24\1\24\6\24\3\0\1\24\1\31"+
    "\1\31\1\31\62\24\1\31\1\24\3\31\2\24\2\31\5\24\2\31"+
    "\1\24\1\31\1\24\30\0\2\24\1\24\2\0\13\24\1\31\2\31"+
    "\2\31\2\0\1\24\2\24\1\31\1\31\12\0\6\24\2\0\6\24"+
    "\2\0\6\24\11\0\7\24\1\0\7\24\1\0\53\24\1\0\4\24"+
    "\11\24\1\24\6\0\120\24\43\24\2\31\1\31\2\31\1\31\2\31"+
    "\1\0\1\31\1\31\2\0\12\31\6\0\u2ba4\24\14\0\27\24\4\0"+
    "\61\24\u2104\0\u016e\24\2\0\152\24\46\0\7\24\14\0\5\24\5\0"+
    "\1\24\1\31\12\24\1\0\15\24\1\0\5\24\1\0\1\24\1\0"+
    "\2\24\1\0\2\24\1\0\154\24\41\0\u016b\24\22\0\100\24\2\0"+
    "\66\24\50\0\14\24\4\0\20\31\20\0\20\31\3\0\2\31\30\0"+
    "\3\31\40\0\5\24\1\0\207\24\23\0\12\31\7\0\32\24\4\0"+
    "\1\31\1\0\32\24\13\0\12\24\1\24\55\24\2\24\37\24\3\0"+
    "\6\24\2\0\6\24\2\0\6\24\2\0\3\24\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\3\0\1\1\1\2\2\3\1\4\4\0"+
    "\1\5\2\6\4\7\1\10\6\7\1\11\1\7\1\12"+
    "\1\7\1\13\1\14\1\15\1\14\1\16\1\17\1\20"+
    "\1\21\4\7\1\22\1\23\1\24\1\5\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\7\1\35"+
    "\1\7\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\10\1\11\1\7\1\21\3\7\1\24"+
    "\1\25\1\31\1\32\1\44\1\1\1\47\1\15\1\16"+
    "\1\50\1\30\1\51\1\33\1\52\2\53\1\12\1\53"+
    "\1\54\3\7\2\55\1\7\1\56\1\57\1\7\1\50"+
    "\1\52\1\2\1\15\1\16\1\33\1\3\1\60\1\15"+
    "\1\16\1\30\1\33\1\3\1\15\1\16\1\30\1\33"+
    "\1\4\1\52\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\3\67\1\70\2\71\2\72\1\11\1\6\4\0\1\6"+
    "\1\73\1\0\1\74\5\7\1\10\1\0\2\7\1\75"+
    "\1\7\1\76\1\77\1\100\5\7\1\101\3\14\1\102"+
    "\3\14\1\103\6\7\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\1\113\1\114\4\7\1\115\1\116\1\117"+
    "\1\120\1\121\1\122\1\0\1\123\4\7\3\0\1\124"+
    "\1\125\1\53\2\7\6\55\2\0\2\4\1\126\1\127"+
    "\1\67\1\0\3\72\1\130\3\72\1\0\1\131\1\0"+
    "\3\6\1\73\1\0\1\132\4\7\1\10\1\0\2\7"+
    "\1\133\1\134\1\7\1\135\4\7\1\14\1\136\1\137"+
    "\1\0\1\136\4\7\1\140\1\7\1\141\1\142\1\143"+
    "\1\144\3\7\1\145\4\7\4\0\1\53\1\7\1\55"+
    "\2\146\1\67\1\0\1\72\1\147\1\150\1\0\1\147"+
    "\1\131\1\7\2\0\2\7\1\10\1\0\5\7\1\151"+
    "\1\152\1\0\2\153\1\0\1\154\5\7\1\155\1\7"+
    "\1\152\3\7\1\0\1\156\14\0\2\150\1\0\1\7"+
    "\2\0\1\157\1\7\1\10\1\0\1\160\4\7\1\0"+
    "\2\136\1\0\1\161\1\162\1\7\1\163\1\7\1\164"+
    "\1\161\1\7\1\163\6\0\2\146\4\0\2\147\1\0"+
    "\1\165\1\166\1\10\1\0\1\7\1\167\1\170\1\171"+
    "\3\136\1\172\1\7\1\172\3\0\3\146\3\147\1\10"+
    "\1\0\1\7\1\153\1\0\1\173\2\0\1\174\1\47"+
    "\6\0\1\175\1\0\1\176\2\136\2\0\2\146\2\147"+
    "\1\175\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\352\0\u0138\0\u0186\0\u01d4\0\u0222"+
    "\0\u0270\0\u02be\0\u030c\0\u035a\0\u03a8\0\u03f6\0\u0444\0\u0492"+
    "\0\u04e0\0\u052e\0\u057c\0\u05ca\0\u0618\0\u0666\0\u06b4\0\u0702"+
    "\0\u0750\0\u079e\0\u07ec\0\u083a\0\u0888\0\u0492\0\u08d6\0\u0924"+
    "\0\u0972\0\u09c0\0\u0a0e\0\u0492\0\u0a5c\0\u0492\0\u0492\0\u0aaa"+
    "\0\u0492\0\u0af8\0\u0b46\0\u0b94\0\u0be2\0\u0c30\0\u0c7e\0\u0ccc"+
    "\0\u0d1a\0\u0492\0\u0492\0\u0492\0\u0492\0\u0d68\0\u0492\0\u0492"+
    "\0\u0492\0\u0db6\0\u0492\0\u0e04\0\u0e52\0\u0ea0\0\u0eee\0\u0f3c"+
    "\0\u0f8a\0\u0492\0\u0492\0\u0492\0\u0492\0\u0fd8\0\u1026\0\u1074"+
    "\0\u1026\0\u10c2\0\u1110\0\u115e\0\u11ac\0\u1026\0\u11fa\0\u1026"+
    "\0\u1026\0\u1248\0\u1296\0\u1248\0\u1248\0\u12e4\0\u1248\0\u0492"+
    "\0\u1248\0\u0492\0\u1332\0\u1380\0\u0492\0\u13ce\0\u0492\0\u141c"+
    "\0\u146a\0\u14b8\0\u1506\0\u1554\0\u15a2\0\u1026\0\u0492\0\u15f0"+
    "\0\u0c30\0\u12e4\0\u163e\0\u163e\0\u163e\0\u163e\0\u168c\0\u0492"+
    "\0\u16da\0\u168c\0\u168c\0\u168c\0\u1728\0\u1776\0\u1728\0\u1728"+
    "\0\u1728\0\u17c4\0\u1812\0\u0492\0\u0492\0\u0492\0\u0492\0\u0492"+
    "\0\u0492\0\u1860\0\u18ae\0\u18fc\0\u0492\0\u0492\0\u194a\0\u1998"+
    "\0\u19e6\0\u1a34\0\u1a82\0\u1ad0\0\u1b1e\0\u1b6c\0\u1bba\0\u0492"+
    "\0\u1c08\0\u1c56\0\u0492\0\u1ca4\0\u1cf2\0\u1d40\0\u1d8e\0\u1ddc"+
    "\0\u1e2a\0\u1e78\0\u1ec6\0\u1f14\0\u05ca\0\u1f62\0\u05ca\0\u05ca"+
    "\0\u05ca\0\u1fb0\0\u1ffe\0\u204c\0\u209a\0\u20e8\0\u0492\0\u2136"+
    "\0\u2184\0\u21d2\0\u0492\0\u2220\0\u226e\0\u22bc\0\u0492\0\u230a"+
    "\0\u2358\0\u23a6\0\u23f4\0\u2442\0\u2490\0\u24de\0\u0492\0\u0492"+
    "\0\u252c\0\u0492\0\u257a\0\u0492\0\u0492\0\u0492\0\u25c8\0\u2616"+
    "\0\u2664\0\u26b2\0\u0492\0\u2700\0\u0492\0\u0492\0\u0492\0\u0492"+
    "\0\u1026\0\u0492\0\u274e\0\u279c\0\u27ea\0\u2838\0\u2886\0\u28d4"+
    "\0\u2922\0\u0492\0\u1332\0\u2970\0\u29be\0\u2a0c\0\u2a5a\0\u2aa8"+
    "\0\u2af6\0\u2b44\0\u2b92\0\u2be0\0\u16da\0\u1776\0\u2c2e\0\u2c7c"+
    "\0\u0492\0\u1860\0\u2cca\0\u2d18\0\u2d66\0\u2db4\0\u2e02\0\u0492"+
    "\0\u2e50\0\u2e9e\0\u2eec\0\u2f3a\0\u1026\0\u1a34\0\u2f88\0\u2fd6"+
    "\0\u3024\0\u3072\0\u30c0\0\u05ca\0\u310e\0\u315c\0\u31aa\0\u31f8"+
    "\0\u3246\0\u3294\0\u32e2\0\u3330\0\u05ca\0\u05ca\0\u337e\0\u05ca"+
    "\0\u33cc\0\u341a\0\u3468\0\u34b6\0\u3504\0\u3552\0\u0492\0\u3504"+
    "\0\u35a0\0\u35ee\0\u363c\0\u368a\0\u36d8\0\u05ca\0\u3726\0\u0492"+
    "\0\u0492\0\u0492\0\u05ca\0\u3774\0\u37c2\0\u3810\0\u0492\0\u385e"+
    "\0\u38ac\0\u38fa\0\u3948\0\u3996\0\u39e4\0\u3a32\0\u3a80\0\u3ace"+
    "\0\u3b1c\0\u0492\0\u3b6a\0\u3bb8\0\u3c06\0\u3c54\0\u3ca2\0\u3cf0"+
    "\0\u0492\0\u3ca2\0\u3d3e\0\u0492\0\u3d8c\0\u3dda\0\u3e28\0\u3e76"+
    "\0\u3ec4\0\u3f12\0\u3f60\0\u3fae\0\u3ffc\0\u404a\0\u4098\0\u40e6"+
    "\0\u05ca\0\u05ca\0\u4134\0\u4182\0\u41d0\0\u421e\0\u05ca\0\u426c"+
    "\0\u42ba\0\u4308\0\u4356\0\u43a4\0\u05ca\0\u43f2\0\u4440\0\u448e"+
    "\0\u44dc\0\u452a\0\u4578\0\u0492\0\u45c6\0\u4614\0\u4662\0\u46b0"+
    "\0\u46fe\0\u474c\0\u479a\0\u47e8\0\u4836\0\u4884\0\u48d2\0\u4920"+
    "\0\u496e\0\u49bc\0\u4a0a\0\u4a58\0\u4aa6\0\u4af4\0\u05ca\0\u4b42"+
    "\0\u4b90\0\u4bde\0\u05ca\0\u4c2c\0\u4c7a\0\u4cc8\0\u4d16\0\u4d64"+
    "\0\u4db2\0\u4e00\0\u4e4e\0\u05ca\0\u05ca\0\u4e9c\0\u05ca\0\u4eea"+
    "\0\u05ca\0\u4440\0\u4f38\0\u4440\0\u4f86\0\u4fd4\0\u5022\0\u2aa8"+
    "\0\u2be0\0\u5070\0\u50be\0\u510c\0\u515a\0\u51a8\0\u51f6\0\u5244"+
    "\0\u5292\0\u52e0\0\u532e\0\u05ca\0\u05ca\0\u537c\0\u53ca\0\u5418"+
    "\0\u05ca\0\u05ca\0\u05ca\0\u5466\0\u54b4\0\u5502\0\u05ca\0\u5550"+
    "\0\u4440\0\u559e\0\u55ec\0\u563a\0\u0492\0\u5688\0\u56d6\0\u3ca2"+
    "\0\u5724\0\u5772\0\u57c0\0\u580e\0\u585c\0\u0492\0\u5466\0\u0492"+
    "\0\u58aa\0\u58f8\0\u05ca\0\u0492\0\u5946\0\u5994\0\u59e2\0\u5a30"+
    "\0\u5a7e\0\u5acc\0\u5b1a\0\u5b68\0\u05ca\0\u4d64\0\u4e4e\0\u5bb6"+
    "\0\u5c04\0\u5070\0\u515a\0\u5244\0\u532e\0\u5c52\0\u5ca0\0\u5cee"+
    "\0\u5d3c\0\u5d8a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\20\1\21\2\22\1\23\1\22\2\24\1\25\1\26"+
    "\1\27\1\20\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\4\24\1\37\1\24\1\20\1\40\1\41\1\24"+
    "\1\42\1\24\3\37\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\24\1\55\1\56"+
    "\1\57\1\60\1\61\4\24\1\62\1\24\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\2\24"+
    "\1\74\1\24\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\20\1\21\2\22\1\23\1\22"+
    "\2\24\1\25\1\26\1\106\1\20\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\107\4\24\1\37\1\24\1\20"+
    "\1\40\1\110\1\24\1\42\1\24\3\37\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\111\1\112\1\113\1\54"+
    "\1\24\1\114\1\56\1\57\1\115\1\61\4\24\1\116"+
    "\1\24\1\63\1\64\1\65\1\117\1\120\1\70\1\71"+
    "\1\72\1\73\2\24\1\74\1\24\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\121\1\104\1\105\12\122\1\123"+
    "\30\122\1\124\1\122\1\125\10\122\1\126\13\122\1\127"+
    "\1\122\1\130\1\131\20\122\4\132\1\133\1\132\4\133"+
    "\2\132\3\133\1\134\2\133\1\132\6\133\1\132\1\135"+
    "\1\136\1\133\1\132\4\133\1\132\1\44\1\132\1\46"+
    "\1\137\2\132\5\133\4\132\4\133\1\132\1\133\2\132"+
    "\1\65\2\132\1\70\1\132\1\133\1\132\4\133\11\132"+
    "\1\20\1\21\2\22\1\23\1\22\2\24\1\140\1\26"+
    "\1\123\1\20\1\141\1\31\1\32\1\33\1\34\1\35"+
    "\1\107\4\24\1\142\1\24\1\20\1\40\1\110\1\24"+
    "\1\42\1\24\3\142\1\143\1\44\1\144\1\46\1\137"+
    "\1\50\1\111\1\112\1\145\1\54\1\24\1\114\1\56"+
    "\1\57\1\115\1\61\4\24\1\116\1\24\1\63\1\64"+
    "\1\65\1\117\1\146\1\70\1\147\1\72\1\73\2\24"+
    "\1\74\1\24\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\121\1\104\1\105\1\20\1\21\2\22\1\23\1\22"+
    "\2\24\1\140\1\26\1\123\1\20\1\141\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\4\24\1\142\1\24\1\20"+
    "\1\40\1\41\1\24\1\42\1\24\3\142\1\143\1\44"+
    "\1\144\1\46\1\137\1\50\1\51\1\52\1\150\1\54"+
    "\1\24\1\55\1\151\1\57\1\60\1\61\4\24\1\62"+
    "\1\24\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\2\24\1\74\1\24\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\12\122\1\123"+
    "\30\122\1\124\1\122\1\125\10\122\1\152\13\122\1\127"+
    "\1\122\1\130\1\131\20\122\13\153\1\132\26\153\1\132"+
    "\1\154\1\132\1\155\1\137\7\153\1\132\1\153\1\132"+
    "\10\153\1\132\1\65\2\132\1\156\20\153\42\157\1\160"+
    "\1\161\1\157\1\162\24\157\1\163\1\157\1\130\1\164"+
    "\20\157\43\165\1\166\1\160\1\167\24\165\1\170\1\165"+
    "\1\130\1\171\20\165\4\132\1\172\1\132\4\172\1\123"+
    "\1\132\6\172\1\132\6\172\2\132\2\172\1\132\4\172"+
    "\1\132\1\44\1\132\1\46\1\137\2\132\5\172\1\132"+
    "\1\173\1\174\1\132\4\172\1\132\1\172\2\132\1\65"+
    "\1\175\1\132\1\70\1\132\1\172\1\132\4\172\11\132"+
    "\13\176\1\132\26\176\1\177\1\44\1\200\1\46\1\132"+
    "\7\176\1\132\1\176\1\132\10\176\1\132\1\65\1\132"+
    "\1\201\1\70\20\176\4\132\1\202\1\132\4\202\2\132"+
    "\3\202\1\203\2\202\1\132\6\202\1\132\1\135\1\204"+
    "\1\202\1\132\4\202\1\132\1\44\1\132\1\46\1\137"+
    "\2\132\5\202\2\132\1\205\1\132\4\202\1\132\1\202"+
    "\2\132\1\65\2\132\1\70\1\132\1\202\1\132\4\202"+
    "\11\132\10\206\1\207\3\206\1\207\12\206\1\207\7\206"+
    "\3\207\1\210\1\44\1\211\1\46\1\137\3\206\1\207"+
    "\17\206\1\65\2\206\1\70\20\206\1\20\1\21\2\22"+
    "\1\23\1\22\2\24\1\140\1\26\1\123\1\20\1\141"+
    "\1\31\1\32\1\33\1\34\1\35\1\212\4\24\1\142"+
    "\1\24\1\20\1\40\1\110\1\24\1\42\1\24\3\142"+
    "\1\143\1\44\1\144\1\46\1\137\1\50\1\111\1\112"+
    "\1\145\1\54\1\24\1\114\1\56\1\57\1\115\1\61"+
    "\4\24\1\116\1\24\1\63\1\64\1\65\1\117\1\120"+
    "\1\70\1\71\1\72\1\73\2\24\1\74\1\24\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\121\1\104\1\105"+
    "\117\0\1\213\1\214\1\213\1\0\1\213\1\215\1\216"+
    "\1\217\1\220\3\0\1\216\10\0\1\215\1\217\1\220"+
    "\1\0\1\221\2\222\1\0\1\223\60\0\3\22\1\0"+
    "\1\22\3\0\1\220\16\0\1\220\1\0\1\221\2\222"+
    "\1\0\1\223\60\0\11\24\2\0\4\24\1\224\1\24"+
    "\1\0\7\24\1\0\2\24\1\0\4\24\7\0\3\24"+
    "\1\225\1\24\4\0\4\24\1\0\1\24\7\0\1\24"+
    "\1\0\4\24\12\0\11\24\2\0\6\24\1\0\7\24"+
    "\1\0\2\24\1\0\4\24\7\0\5\24\4\0\4\24"+
    "\1\0\1\24\7\0\1\24\1\0\4\24\12\0\7\24"+
    "\1\226\1\24\2\0\1\226\5\24\1\0\4\24\1\226"+
    "\2\24\1\0\2\24\1\0\1\24\3\226\1\43\1\0"+
    "\1\45\4\0\1\24\1\227\3\24\4\0\4\24\1\0"+
    "\1\24\7\0\1\24\1\0\4\24\12\0\3\24\1\230"+
    "\5\24\2\0\6\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\5\24\4\0\4\24\1\0\1\24\7\0"+
    "\1\24\1\0\4\24\11\0\13\106\1\0\1\231\30\106"+
    "\1\27\1\232\23\106\1\27\23\106\1\0\7\24\1\226"+
    "\1\233\2\0\1\226\1\234\4\24\1\0\4\24\1\226"+
    "\2\24\1\0\2\24\1\0\1\24\3\226\1\43\1\0"+
    "\1\45\4\0\1\24\1\226\3\24\4\0\4\24\1\0"+
    "\1\24\7\0\1\24\1\0\4\24\12\0\11\24\2\0"+
    "\6\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\1\24\1\235\3\24\4\0\4\24\1\0\1\24\7\0"+
    "\1\24\1\0\4\24\12\0\11\24\2\0\6\24\1\0"+
    "\7\24\1\0\1\236\1\24\1\0\4\24\7\0\5\24"+
    "\4\0\4\24\1\0\1\24\7\0\1\24\1\0\4\24"+
    "\12\0\11\24\2\0\4\24\1\237\1\24\1\0\7\24"+
    "\1\0\2\24\1\0\4\24\7\0\3\24\1\240\1\24"+
    "\4\0\4\24\1\0\1\24\7\0\1\241\1\0\1\24"+
    "\1\242\2\24\12\0\11\24\2\0\1\24\1\243\4\24"+
    "\1\0\7\24\1\0\2\24\1\0\4\24\7\0\5\24"+
    "\4\0\4\24\1\0\1\24\7\0\1\24\1\0\4\24"+
    "\12\0\10\24\1\244\2\0\6\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\5\24\4\0\4\24\1\0"+
    "\1\24\7\0\1\24\1\0\4\24\12\0\7\24\1\226"+
    "\1\24\2\0\1\226\5\24\1\0\4\24\1\226\2\24"+
    "\1\0\2\24\1\0\1\24\3\226\1\43\1\0\1\45"+
    "\4\0\1\24\1\226\3\24\4\0\4\24\1\0\1\24"+
    "\7\0\1\24\1\0\4\24\12\0\3\221\1\0\1\221"+
    "\111\0\5\24\1\245\2\24\1\246\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\5\24\4\0"+
    "\4\24\1\0\1\24\7\0\1\24\1\0\4\24\104\0"+
    "\1\247\22\0\13\250\1\0\26\250\1\251\1\252\2\250"+
    "\1\253\47\250\13\254\1\0\27\254\1\255\1\256\1\254"+
    "\1\253\47\254\73\0\1\257\23\0\3\24\1\260\5\24"+
    "\2\0\6\24\1\0\7\24\1\0\2\24\1\0\4\24"+
    "\7\0\1\24\1\261\3\24\4\0\4\24\1\0\1\24"+
    "\7\0\1\24\1\0\4\24\12\0\3\24\1\262\3\24"+
    "\1\226\1\24\2\0\1\226\5\24\1\0\4\24\1\226"+
    "\2\24\1\0\1\263\1\24\1\0\1\24\3\226\1\43"+
    "\1\0\1\45\4\0\1\24\1\226\3\24\4\0\4\24"+
    "\1\0\1\24\7\0\1\24\1\0\4\24\12\0\11\24"+
    "\2\0\6\24\1\0\7\24\1\0\2\24\1\0\4\24"+
    "\7\0\1\24\1\264\3\24\4\0\4\24\1\0\1\24"+
    "\7\0\1\24\1\0\4\24\12\0\11\24\2\0\3\24"+
    "\1\265\2\24\1\0\7\24\1\0\2\24\1\0\4\24"+
    "\7\0\5\24\4\0\4\24\1\0\1\24\7\0\1\24"+
    "\1\0\4\24\67\0\1\266\1\0\1\267\12\0\1\270"+
    "\101\0\1\271\13\0\1\272\102\0\1\273\12\0\1\274"+
    "\115\0\1\275\115\0\1\276\23\0\11\24\2\0\1\24"+
    "\1\277\1\24\1\300\2\24\1\0\7\24\1\0\2\24"+
    "\1\0\4\24\7\0\1\24\1\301\3\24\4\0\4\24"+
    "\1\0\1\24\7\0\1\24\1\0\4\24\12\0\11\24"+
    "\2\0\6\24\1\0\7\24\1\0\2\24\1\0\4\24"+
    "\7\0\5\24\4\0\4\24\1\0\1\24\7\0\1\24"+
    "\1\0\3\24\1\302\104\0\1\303\11\0\1\304\103\0"+
    "\1\305\115\0\1\306\115\0\1\307\115\0\1\310\22\0"+
    "\13\106\1\0\32\106\1\0\47\106\45\0\2\311\7\0"+
    "\1\312\13\0\1\311\24\0\5\24\1\245\2\24\1\313"+
    "\2\0\6\24\1\0\7\24\1\0\2\24\1\0\4\24"+
    "\7\0\5\24\4\0\4\24\1\0\1\24\7\0\1\24"+
    "\1\0\4\24\12\0\3\24\1\260\5\24\2\0\6\24"+
    "\1\0\7\24\1\0\2\24\1\0\4\24\7\0\1\24"+
    "\1\314\3\24\4\0\4\24\1\0\1\24\7\0\1\24"+
    "\1\0\4\24\12\0\3\24\1\262\3\24\1\226\1\24"+
    "\2\0\1\226\5\24\1\0\4\24\1\226\2\24\1\0"+
    "\1\315\1\24\1\0\1\24\3\226\1\43\1\0\1\45"+
    "\4\0\1\24\1\226\3\24\4\0\4\24\1\0\1\24"+
    "\7\0\1\24\1\0\4\24\12\0\11\24\2\0\3\24"+
    "\1\316\2\24\1\0\7\24\1\0\2\24\1\0\4\24"+
    "\7\0\5\24\4\0\4\24\1\0\1\24\7\0\1\24"+
    "\1\0\4\24\56\0\2\311\7\0\1\312\1\0\1\273"+
    "\11\0\1\311\1\274\67\0\2\311\7\0\1\312\13\0"+
    "\1\311\1\276\22\0\12\122\1\0\43\122\1\0\15\122"+
    "\1\0\21\122\13\123\1\0\32\123\1\0\47\123\57\0"+
    "\1\317\1\0\1\320\35\0\11\133\2\0\6\133\1\0"+
    "\1\133\1\321\4\133\1\321\1\322\2\133\1\0\4\133"+
    "\7\0\5\133\4\0\4\133\1\0\1\133\7\0\1\133"+
    "\1\0\4\133\12\0\11\133\2\0\6\133\1\0\1\133"+
    "\1\321\4\133\1\321\1\322\2\133\1\0\4\133\7\0"+
    "\5\133\4\0\4\133\1\0\1\133\7\0\1\323\1\0"+
    "\4\133\12\0\10\133\1\324\2\0\6\133\1\0\1\133"+
    "\1\321\4\133\1\321\1\322\2\133\1\0\4\133\7\0"+
    "\5\133\4\0\4\133\1\0\1\133\7\0\1\133\1\0"+
    "\4\133\12\0\7\24\1\325\1\24\2\0\1\325\5\24"+
    "\1\0\4\24\1\325\2\24\1\0\2\24\1\0\1\24"+
    "\3\325\1\143\1\0\1\144\4\0\1\24\1\326\3\24"+
    "\4\0\4\24\1\0\1\24\7\0\1\24\1\0\4\24"+
    "\12\0\7\24\1\325\1\233\2\0\1\325\1\234\4\24"+
    "\1\0\4\24\1\325\2\24\1\0\2\24\1\0\1\24"+
    "\3\325\1\143\1\0\1\144\4\0\1\24\1\325\3\24"+
    "\4\0\4\24\1\0\1\24\7\0\1\24\1\0\4\24"+
    "\12\0\7\24\1\325\1\24\2\0\1\325\5\24\1\0"+
    "\4\24\1\325\2\24\1\0\2\24\1\0\1\24\3\325"+
    "\1\143\1\0\1\144\4\0\1\24\1\325\3\24\4\0"+
    "\4\24\1\0\1\24\7\0\1\24\1\0\4\24\11\0"+
    "\13\327\1\0\26\327\1\330\1\331\2\327\1\0\47\327"+
    "\13\332\1\0\27\332\1\333\1\334\1\332\1\0\47\332"+
    "\1\0\3\24\1\262\3\24\1\325\1\24\2\0\1\325"+
    "\5\24\1\0\4\24\1\325\2\24\1\0\1\315\1\24"+
    "\1\0\1\24\3\325\1\143\1\0\1\144\4\0\1\24"+
    "\1\325\3\24\4\0\4\24\1\0\1\24\7\0\1\24"+
    "\1\0\4\24\12\0\3\24\1\262\3\24\1\325\1\24"+
    "\2\0\1\325\5\24\1\0\4\24\1\325\2\24\1\0"+
    "\1\263\1\24\1\0\1\24\3\325\1\143\1\0\1\144"+
    "\4\0\1\24\1\325\3\24\4\0\4\24\1\0\1\24"+
    "\7\0\1\24\1\0\4\24\11\0\13\153\1\0\26\153"+
    "\1\0\1\153\1\0\1\153\1\0\7\153\1\0\1\153"+
    "\1\0\10\153\4\0\21\153\42\157\1\0\1\335\30\157"+
    "\1\0\137\157\43\165\1\336\1\0\27\165\1\0\137\165"+
    "\1\0\11\172\2\0\6\172\1\337\1\172\1\340\4\172"+
    "\2\0\2\172\1\0\4\172\5\0\1\172\1\0\5\172"+
    "\4\0\4\172\1\0\1\172\7\0\1\172\1\0\4\172"+
    "\71\0\1\341\36\0\11\202\2\0\6\202\1\0\1\202"+
    "\1\321\4\202\1\321\1\322\2\202\1\0\4\202\7\0"+
    "\5\202\4\0\4\202\1\0\1\202\7\0\1\202\1\0"+
    "\4\202\12\0\11\202\2\0\6\202\1\0\1\202\1\321"+
    "\4\202\1\321\1\322\2\202\1\0\4\202\7\0\5\202"+
    "\4\0\4\202\1\0\1\202\7\0\1\342\1\0\4\202"+
    "\12\0\10\202\1\343\2\0\6\202\1\0\1\202\1\321"+
    "\4\202\1\321\1\322\2\202\1\0\4\202\7\0\5\202"+
    "\4\0\4\202\1\0\1\202\7\0\1\202\1\0\4\202"+
    "\21\0\1\344\3\0\1\344\12\0\1\344\7\0\3\344"+
    "\1\210\1\0\1\211\5\0\1\344\43\0\13\345\1\0"+
    "\26\345\1\346\1\347\2\345\1\350\47\345\13\351\1\0"+
    "\27\351\1\352\1\353\1\351\1\350\47\351\12\0\1\354"+
    "\32\0\1\311\1\355\7\0\1\312\13\0\1\356\24\0"+
    "\1\213\1\214\1\213\1\0\1\213\3\0\1\220\16\0"+
    "\1\220\1\0\1\221\2\222\1\0\1\223\60\0\3\214"+
    "\1\0\1\214\24\0\1\221\2\222\1\0\1\223\60\0"+
    "\5\357\2\0\1\357\3\0\1\357\1\0\1\357\6\0"+
    "\1\357\1\0\1\357\3\0\2\357\2\0\1\357\22\0"+
    "\1\357\4\0\1\357\7\0\1\357\17\0\1\360\1\0"+
    "\1\360\1\0\1\360\111\0\1\361\3\0\1\361\111\0"+
    "\3\221\1\0\1\221\25\0\2\222\1\0\1\223\60\0"+
    "\3\362\1\0\1\362\27\0\1\363\11\0\1\363\47\0"+
    "\11\24\2\0\2\24\1\364\3\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\5\24\4\0\4\24\1\0"+
    "\1\24\7\0\1\24\1\0\4\24\12\0\11\24\2\0"+
    "\6\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\3\24\1\365\1\24\4\0\4\24\1\0\1\24\7\0"+
    "\1\24\1\0\4\24\12\0\7\24\1\366\1\24\2\0"+
    "\1\366\5\24\1\0\4\24\1\366\2\24\1\0\2\24"+
    "\1\0\1\24\3\366\1\43\1\0\1\45\4\0\1\24"+
    "\1\366\3\24\4\0\4\24\1\0\1\24\7\0\1\24"+
    "\1\0\4\24\12\0\7\24\1\366\1\24\2\0\1\366"+
    "\5\24\1\0\4\24\1\366\2\24\1\0\1\367\1\24"+
    "\1\0\1\24\3\366\1\43\1\0\1\45\4\0\1\24"+
    "\1\366\3\24\4\0\4\24\1\0\1\24\7\0\1\24"+
    "\1\0\4\24\12\0\11\24\2\0\6\24\1\0\7\24"+
    "\1\0\2\24\1\0\4\24\7\0\5\24\4\0\4\24"+
    "\1\0\1\24\7\0\1\24\1\0\1\24\1\370\2\24"+
    "\11\0\13\106\1\0\1\106\1\371\30\106\1\0\47\106"+
    "\14\0\1\372\30\0\2\232\23\0\1\232\24\0\3\24"+
    "\1\373\5\24\2\0\6\24\1\0\7\24\1\0\2\24"+
    "\1\0\4\24\7\0\5\24\4\0\4\24\1\0\1\24"+
    "\7\0\1\24\1\0\4\24\12\0\11\24\2\0\4\24"+
    "\1\374\1\24\1\0\7\24\1\0\2\24\1\0\4\24"+
    "\7\0\5\24\4\0\4\24\1\0\1\24\7\0\1\24"+
    "\1\0\4\24\12\0\10\24\1\375\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\5\24\4\0"+
    "\4\24\1\0\1\24\7\0\1\376\1\0\4\24\12\0"+
    "\11\24\2\0\6\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\1\377\4\24\4\0\4\24\1\0\1\24"+
    "\7\0\1\24\1\0\4\24\12\0\11\24\2\0\6\24"+
    "\1\0\7\24\1\0\2\24\1\0\4\24\7\0\2\24"+
    "\1\u0100\2\24\4\0\4\24\1\0\1\24\7\0\1\24"+
    "\1\0\4\24\12\0\11\24\2\0\1\24\1\u0101\4\24"+
    "\1\0\7\24\1\0\2\24\1\0\4\24\7\0\5\24"+
    "\4\0\4\24\1\0\1\24\7\0\1\24\1\0\4\24"+
    "\12\0\11\24\2\0\1\u0102\5\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\5\24\4\0\4\24\1\0"+
    "\1\24\7\0\1\24\1\0\4\24\12\0\11\24\2\0"+
    "\3\24\1\u0103\2\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\3\24\1\u0104\1\24\4\0\4\24\1\0"+
    "\1\24\7\0\1\24\1\0\4\24\11\0\13\250\1\0"+
    "\26\250\1\u0105\1\252\2\250\1\253\47\250\42\0\1\u0106"+
    "\1\u0107\1\0\1\u0108\1\253\23\0\1\u0108\5\0\1\253"+
    "\15\0\116\250\13\254\1\0\27\254\1\255\1\u0105\1\254"+
    "\1\253\165\254\43\0\1\u0107\1\u0109\1\u0108\1\253\23\0"+
    "\1\u0108\5\0\1\253\16\0\11\24\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\3\24\1\u010a"+
    "\1\24\4\0\4\24\1\0\1\24\7\0\1\24\1\0"+
    "\4\24\12\0\11\24\2\0\3\24\1\u010b\2\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\5\24\4\0"+
    "\4\24\1\0\1\24\7\0\1\24\1\0\4\24\12\0"+
    "\11\24\2\0\3\24\1\u010c\2\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\5\24\4\0\4\24\1\0"+
    "\1\24\7\0\1\24\1\0\4\24\12\0\11\24\2\0"+
    "\6\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\2\24\1\u010d\2\24\4\0\4\24\1\0\1\24\7\0"+
    "\1\24\1\0\4\24\12\0\11\24\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\4\24\1\u010e"+
    "\4\0\4\24\1\0\1\24\7\0\1\24\1\0\4\24"+
    "\12\0\11\24\2\0\6\24\1\0\7\24\1\0\1\u010f"+
    "\1\24\1\0\4\24\7\0\5\24\4\0\4\24\1\0"+
    "\1\24\7\0\1\24\1\0\4\24\104\0\1\u0110\115\0"+
    "\1\u0111\115\0\1\u0112\23\0\11\24\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\1\24\1\u0113"+
    "\3\24\4\0\4\24\1\0\1\24\7\0\1\24\1\0"+
    "\4\24\12\0\11\24\2\0\4\24\1\u0114\1\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\5\24\4\0"+
    "\4\24\1\0\1\24\7\0\1\24\1\0\4\24\12\0"+
    "\11\24\2\0\1\24\1\u0115\4\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\5\24\4\0\4\24\1\0"+
    "\1\24\7\0\1\24\1\0\4\24\12\0\11\24\2\0"+
    "\3\24\1\u0116\2\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\5\24\4\0\4\24\1\0\1\24\7\0"+
    "\1\24\1\0\4\24\104\0\1\u0117\23\0\11\24\2\0"+
    "\3\24\1\u0103\2\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\3\24\1\u0118\1\24\4\0\4\24\1\0"+
    "\1\24\7\0\1\24\1\0\4\24\12\0\11\24\2\0"+
    "\3\24\1\u0119\2\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\5\24\4\0\4\24\1\0\1\24\7\0"+
    "\1\24\1\0\4\24\12\0\11\24\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\2\24\1\u011a"+
    "\2\24\4\0\4\24\1\0\1\24\7\0\1\24\1\0"+
    "\4\24\12\0\11\24\2\0\6\24\1\0\7\24\1\0"+
    "\1\u011b\1\24\1\0\4\24\7\0\5\24\4\0\4\24"+
    "\1\0\1\24\7\0\1\24\1\0\4\24\15\0\1\u011c"+
    "\1\0\4\u011c\2\0\6\u011c\1\0\6\u011c\2\0\2\u011c"+
    "\1\0\4\u011c\7\0\5\u011c\4\0\4\u011c\1\0\1\u011c"+
    "\7\0\1\u011c\1\0\4\u011c\60\0\1\u011d\12\0\1\u011e"+
    "\3\0\1\u011f\30\0\11\321\2\0\6\321\1\0\7\321"+
    "\1\322\2\321\1\0\4\321\7\0\5\321\4\0\4\321"+
    "\1\0\1\321\7\0\1\321\1\0\4\321\12\0\11\133"+
    "\2\0\6\133\1\0\1\133\1\321\4\133\1\321\1\322"+
    "\2\133\1\0\4\133\7\0\3\133\1\u0120\1\133\4\0"+
    "\4\133\1\0\1\133\7\0\1\133\1\0\4\133\12\0"+
    "\7\24\1\u0121\1\24\2\0\1\u0121\5\24\1\0\4\24"+
    "\1\u0121\2\24\1\0\2\24\1\0\1\24\3\u0121\1\143"+
    "\1\0\1\144\4\0\1\24\1\u0121\3\24\4\0\4\24"+
    "\1\0\1\24\7\0\1\24\1\0\4\24\12\0\7\24"+
    "\1\u0121\1\24\2\0\1\u0121\5\24\1\0\4\24\1\u0121"+
    "\2\24\1\0\1\367\1\24\1\0\1\24\3\u0121\1\143"+
    "\1\0\1\144\4\0\1\24\1\u0121\3\24\4\0\4\24"+
    "\1\0\1\24\7\0\1\24\1\0\4\24\11\0\13\327"+
    "\1\0\26\327\1\u0122\1\331\2\327\1\0\47\327\42\0"+
    "\1\u0123\53\0\116\327\13\332\1\0\27\332\1\333\1\u0122"+
    "\1\332\1\0\165\332\44\0\1\u0124\55\0\1\340\1\0"+
    "\4\340\2\0\6\340\1\0\6\340\2\0\2\340\1\0"+
    "\4\340\7\0\5\340\4\0\4\340\1\0\1\340\7\0"+
    "\1\340\1\0\4\340\12\0\11\340\2\0\6\340\1\0"+
    "\6\340\2\0\2\340\1\0\4\340\5\0\1\340\1\0"+
    "\5\340\4\0\4\340\1\0\1\340\7\0\1\340\1\0"+
    "\4\340\12\0\11\202\2\0\6\202\1\0\1\202\1\321"+
    "\4\202\1\321\1\322\2\202\1\0\4\202\7\0\3\202"+
    "\1\u0125\1\202\4\0\4\202\1\0\1\202\7\0\1\202"+
    "\1\0\4\202\21\0\1\u0126\3\0\1\u0126\12\0\1\u0126"+
    "\7\0\3\u0126\1\210\1\0\1\211\5\0\1\u0126\43\0"+
    "\13\345\1\0\26\345\1\u0127\1\347\2\345\1\350\47\345"+
    "\42\0\1\u0128\1\u0129\1\0\1\u012a\1\350\23\0\1\u012a"+
    "\5\0\1\350\15\0\116\345\13\351\1\0\27\351\1\352"+
    "\1\u0127\1\351\1\350\165\351\43\0\1\u0129\1\u012b\1\u012a"+
    "\1\350\23\0\1\u012a\5\0\1\350\15\0\13\354\1\0"+
    "\32\354\1\u012c\47\354\1\0\5\357\2\0\1\357\1\220"+
    "\2\0\1\357\1\0\1\357\6\0\1\357\1\0\1\357"+
    "\1\220\2\0\2\357\2\0\1\357\22\0\1\357\4\0"+
    "\1\357\7\0\1\357\17\0\1\360\1\0\1\360\1\0"+
    "\1\360\3\0\1\220\16\0\1\220\66\0\1\361\3\0"+
    "\1\361\3\0\1\220\16\0\1\220\66\0\3\362\1\0"+
    "\1\362\30\0\1\223\60\0\3\362\1\0\1\362\111\0"+
    "\11\24\2\0\6\24\1\0\7\24\1\0\1\u012d\1\24"+
    "\1\0\4\24\7\0\5\24\4\0\4\24\1\0\1\24"+
    "\7\0\1\24\1\0\4\24\12\0\11\24\2\0\6\24"+
    "\1\0\7\24\1\0\2\24\1\0\4\24\1\u012e\1\0"+
    "\1\u012f\4\0\5\24\4\0\4\24\1\0\1\24\7\0"+
    "\1\24\1\0\4\24\12\0\3\24\1\u0130\5\24\2\0"+
    "\6\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\5\24\4\0\4\24\1\0\1\24\7\0\1\24\1\0"+
    "\4\24\12\0\7\24\1\u0131\1\24\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\5\24\4\0"+
    "\4\24\1\0\1\24\7\0\1\24\1\0\4\24\11\0"+
    "\13\106\1\0\2\106\1\u0132\27\106\1\0\47\106\15\0"+
    "\1\u0133\101\0\11\24\2\0\6\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\3\24\1\u0134\1\24\4\0"+
    "\4\24\1\0\1\24\7\0\1\24\1\0\4\24\12\0"+
    "\11\24\2\0\6\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\2\24\1\u0135\2\24\4\0\4\24\1\0"+
    "\1\24\7\0\1\24\1\0\4\24\12\0\11\24\2\0"+
    "\1\24\1\u0136\4\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\5\24\4\0\4\24\1\0\1\24\7\0"+
    "\1\24\1\0\4\24\12\0\7\24\1\u0137\1\24\2\0"+
    "\6\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\5\24\4\0\4\24\1\0\1\24\7\0\1\24\1\0"+
    "\4\24\12\0\11\24\2\0\6\24\1\0\7\24\1\0"+
    "\1\u0138\1\24\1\0\4\24\7\0\5\24\4\0\4\24"+
    "\1\0\1\24\7\0\1\24\1\0\4\24\12\0\11\24"+
    "\2\0\6\24\1\0\7\24\1\0\2\24\1\0\4\24"+
    "\7\0\5\24\4\0\4\24\1\0\1\24\7\0\1\u0139"+
    "\1\0\4\24\12\0\11\24\2\0\6\24\1\0\7\24"+
    "\1\0\1\u013a\1\24\1\0\4\24\7\0\5\24\4\0"+
    "\4\24\1\0\1\24\7\0\1\24\1\0\4\24\54\0"+
    "\1\u0107\1\0\1\u0108\1\253\23\0\1\u0108\5\0\1\253"+
    "\15\0\42\u0106\1\u013b\1\u013c\52\u0106\43\u0109\1\u013d\1\u013e"+
    "\51\u0109\1\0\11\24\2\0\6\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\3\24\1\u013f\1\24\4\0"+
    "\4\24\1\0\1\24\7\0\1\24\1\0\4\24\12\0"+
    "\11\24\2\0\4\24\1\u0140\1\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\5\24\4\0\4\24\1\0"+
    "\1\24\7\0\1\24\1\0\4\24\12\0\11\24\2\0"+
    "\6\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\3\24\1\u0141\1\24\4\0\4\24\1\0\1\24\7\0"+
    "\1\24\1\0\4\24\12\0\11\24\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\3\24\1\u0142\7\0\5\24"+
    "\4\0\4\24\1\0\1\24\7\0\1\24\1\0\4\24"+
    "\12\0\10\24\1\u0143\2\0\6\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\5\24\4\0\4\24\1\0"+
    "\1\24\7\0\1\24\1\0\4\24\12\0\3\24\1\u0144"+
    "\5\24\2\0\6\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\5\24\4\0\4\24\1\0\1\24\7\0"+
    "\1\24\1\0\4\24\12\0\11\24\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\5\24\4\0"+
    "\4\24\1\0\1\24\7\0\1\24\1\0\1\24\1\u0145"+
    "\2\24\12\0\10\24\1\u0146\2\0\6\24\1\0\7\24"+
    "\1\0\2\24\1\0\4\24\7\0\5\24\4\0\4\24"+
    "\1\0\1\24\7\0\1\24\1\0\4\24\12\0\11\24"+
    "\2\0\6\24\1\0\7\24\1\0\1\u0147\1\24\1\0"+
    "\4\24\7\0\5\24\4\0\4\24\1\0\1\24\7\0"+
    "\1\24\1\0\4\24\12\0\11\24\2\0\4\24\1\u0148"+
    "\1\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\5\24\4\0\4\24\1\0\1\24\7\0\1\24\1\0"+
    "\4\24\12\0\11\24\2\0\6\24\1\0\7\24\1\0"+
    "\2\24\1\0\3\24\1\u0149\7\0\5\24\4\0\4\24"+
    "\1\0\1\24\7\0\1\24\1\0\4\24\12\0\10\24"+
    "\1\u014a\2\0\6\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\5\24\4\0\4\24\1\0\1\24\7\0"+
    "\1\24\1\0\4\24\12\0\11\u011c\2\0\6\u011c\1\0"+
    "\1\u011c\1\u014b\4\u011c\1\u014b\1\317\2\u011c\1\0\4\u011c"+
    "\7\0\5\u011c\2\0\1\u014c\1\0\4\u011c\1\0\1\u011c"+
    "\7\0\1\u011c\1\0\4\u011c\60\0\1\u014d\55\0\1\u014e"+
    "\145\0\1\u014f\57\0\11\133\2\0\6\133\1\0\1\133"+
    "\1\321\4\133\1\321\1\322\1\323\1\133\1\0\4\133"+
    "\7\0\5\133\4\0\4\133\1\0\1\133\7\0\1\133"+
    "\1\0\4\133\12\0\11\24\2\0\6\24\1\0\7\24"+
    "\1\0\2\24\1\0\4\24\1\u0150\1\0\1\u0151\4\0"+
    "\5\24\4\0\4\24\1\0\1\24\7\0\1\24\1\0"+
    "\4\24\11\0\42\u0123\1\u0152\1\u0153\52\u0123\43\u0124\1\u0154"+
    "\1\u0155\51\u0124\1\0\11\202\2\0\6\202\1\0\1\202"+
    "\1\321\4\202\1\321\1\322\1\342\1\202\1\0\4\202"+
    "\7\0\5\202\4\0\4\202\1\0\1\202\7\0\1\202"+
    "\1\0\4\202\53\0\1\u0156\1\0\1\u0157\114\0\1\u0129"+
    "\1\0\1\u012a\1\350\23\0\1\u012a\5\0\1\350\15\0"+
    "\42\u0128\1\u0158\1\u0159\52\u0128\43\u012b\1\u015a\1\u015b\51\u012b"+
    "\1\0\11\24\2\0\6\24\1\0\7\24\1\0\2\24"+
    "\1\0\4\24\7\0\1\24\1\u015c\3\24\4\0\4\24"+
    "\1\0\1\24\7\0\1\24\1\0\4\24\53\0\1\u015d"+
    "\117\0\1\u015e\52\0\11\24\2\0\6\24\1\0\7\24"+
    "\1\0\2\24\1\0\4\24\7\0\5\24\4\0\4\24"+
    "\1\0\1\24\7\0\1\24\1\0\1\u015f\3\24\12\0"+
    "\11\24\2\0\2\24\1\u0160\3\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\5\24\4\0\4\24\1\0"+
    "\1\24\7\0\1\24\1\0\4\24\11\0\13\106\1\0"+
    "\3\106\1\u0161\26\106\1\0\47\106\16\0\1\u0162\100\0"+
    "\11\24\2\0\6\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\3\24\1\u0163\1\24\4\0\4\24\1\0"+
    "\1\24\7\0\1\24\1\0\4\24\12\0\11\24\2\0"+
    "\3\24\1\u0164\2\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\5\24\4\0\4\24\1\0\1\24\7\0"+
    "\1\24\1\0\4\24\12\0\11\24\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\1\24\1\u0165"+
    "\3\24\4\0\4\24\1\0\1\24\7\0\1\24\1\0"+
    "\4\24\12\0\3\24\1\u0166\5\24\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\5\24\4\0"+
    "\4\24\1\0\1\24\7\0\1\24\1\0\4\24\12\0"+
    "\11\24\2\0\6\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\1\u0167\4\24\4\0\4\24\1\0\1\24"+
    "\7\0\1\24\1\0\4\24\11\0\42\u0106\1\u0168\1\u0169"+
    "\170\u0106\161\u0109\1\u016a\1\u016b\51\u0109\1\0\11\24\2\0"+
    "\6\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\2\24\1\u016c\2\24\4\0\4\24\1\0\1\24\7\0"+
    "\1\24\1\0\4\24\12\0\11\24\2\0\6\24\1\0"+
    "\7\24\1\0\1\u016d\1\24\1\0\4\24\7\0\5\24"+
    "\4\0\4\24\1\0\1\24\7\0\1\24\1\0\4\24"+
    "\12\0\11\24\2\0\6\24\1\0\7\24\1\0\2\24"+
    "\1\0\4\24\7\0\1\24\1\u016e\3\24\4\0\4\24"+
    "\1\0\1\24\7\0\1\24\1\0\4\24\12\0\11\24"+
    "\2\0\2\24\1\u016f\3\24\1\0\7\24\1\0\2\24"+
    "\1\0\4\24\7\0\5\24\4\0\4\24\1\0\1\24"+
    "\7\0\1\24\1\0\4\24\12\0\10\24\1\u0170\2\0"+
    "\6\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\5\24\4\0\4\24\1\0\1\24\7\0\1\24\1\0"+
    "\4\24\12\0\11\24\2\0\6\24\1\0\7\24\1\0"+
    "\1\u0171\1\24\1\0\4\24\7\0\5\24\4\0\4\24"+
    "\1\0\1\24\7\0\1\24\1\0\4\24\12\0\11\24"+
    "\2\0\6\24\1\0\7\24\1\0\2\24\1\0\4\24"+
    "\3\0\2\311\2\0\5\24\1\312\3\0\4\24\1\0"+
    "\1\24\2\0\1\311\4\0\1\24\1\0\4\24\12\0"+
    "\11\24\2\0\6\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\2\24\1\u0172\2\24\4\0\4\24\1\0"+
    "\1\24\7\0\1\24\1\0\4\24\12\0\11\24\2\0"+
    "\6\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\1\24\1\u0173\3\24\4\0\4\24\1\0\1\24\7\0"+
    "\1\24\1\0\4\24\12\0\11\24\2\0\2\24\1\u0174"+
    "\3\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\5\24\4\0\4\24\1\0\1\24\7\0\1\24\1\0"+
    "\4\24\12\0\11\u014b\2\0\6\u014b\1\0\7\u014b\1\317"+
    "\2\u014b\1\0\4\u014b\7\0\5\u014b\4\0\4\u014b\1\0"+
    "\1\u014b\7\0\1\u014b\1\0\4\u014b\11\0\47\u014d\1\u0175"+
    "\46\u014d\37\0\1\u0176\140\0\1\u0177\75\0\1\u0178\117\0"+
    "\1\u0179\51\0\42\u0123\1\u017a\1\u017b\170\u0123\161\u0124\1\u017c"+
    "\1\u017d\51\u0124\42\0\1\u017e\117\0\1\u017f\51\0\42\u0128"+
    "\1\u0180\1\u0181\170\u0128\161\u012b\1\u0182\1\u0183\51\u012b\1\0"+
    "\11\24\2\0\6\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\2\24\1\u0184\2\24\4\0\4\24\1\0"+
    "\1\24\7\0\1\24\1\0\4\24\53\0\1\u0106\117\0"+
    "\1\u0109\52\0\3\24\1\u0185\5\24\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\5\24\4\0"+
    "\4\24\1\0\1\24\7\0\1\24\1\0\4\24\11\0"+
    "\13\106\1\0\4\106\1\u0186\25\106\1\0\47\106\17\0"+
    "\1\u0187\77\0\11\24\2\0\4\24\1\u0188\1\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\5\24\4\0"+
    "\4\24\1\0\1\24\7\0\1\24\1\0\4\24\12\0"+
    "\11\24\2\0\6\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\2\24\1\u0189\2\24\4\0\4\24\1\0"+
    "\1\24\7\0\1\24\1\0\4\24\12\0\10\24\1\u018a"+
    "\2\0\6\24\1\0\7\24\1\0\2\24\1\0\4\24"+
    "\7\0\5\24\4\0\4\24\1\0\1\24\7\0\1\24"+
    "\1\0\4\24\12\0\11\24\2\0\6\24\1\0\7\24"+
    "\1\0\2\24\1\0\4\24\7\0\2\24\1\u018b\2\24"+
    "\4\0\4\24\1\0\1\24\7\0\1\24\1\0\4\24"+
    "\11\0\42\u0106\1\u018c\1\u0169\114\u0106\1\u018d\1\u0169\52\u0106"+
    "\43\u0109\1\u016a\1\u018e\114\u0109\1\u016a\1\u018c\51\u0109\1\0"+
    "\11\24\2\0\4\24\1\u018f\1\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\5\24\4\0\4\24\1\0"+
    "\1\24\7\0\1\24\1\0\4\24\12\0\10\24\1\u0190"+
    "\2\0\6\24\1\0\7\24\1\0\2\24\1\0\4\24"+
    "\7\0\5\24\4\0\4\24\1\0\1\24\7\0\1\24"+
    "\1\0\4\24\12\0\11\24\2\0\4\24\1\u0191\1\24"+
    "\1\0\7\24\1\0\2\24\1\0\4\24\7\0\5\24"+
    "\4\0\4\24\1\0\1\24\7\0\1\24\1\0\4\24"+
    "\11\0\47\u014d\1\u0192\46\u014d\63\0\1\u0193\121\0\1\u0194"+
    "\26\0\42\u0123\1\u0195\1\u017b\114\u0123\1\u0196\1\u017b\52\u0123"+
    "\43\u0124\1\u017c\1\u0197\114\u0124\1\u017c\1\u0195\51\u0124\42\0"+
    "\1\u0128\117\0\1\u012b\51\0\42\u0128\1\u0198\1\u0181\114\u0128"+
    "\1\u0199\1\u0181\52\u0128\43\u012b\1\u0182\1\u019a\114\u012b\1\u0182"+
    "\1\u0198\51\u012b\13\106\1\0\5\106\1\u019b\24\106\1\0"+
    "\47\106\20\0\1\u019c\76\0\11\24\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\3\24\1\u019d\7\0\5\24"+
    "\4\0\4\24\1\0\1\24\7\0\1\24\1\0\4\24"+
    "\54\0\1\u019e\1\0\1\u019f\1\u01a0\23\0\1\u019f\5\0"+
    "\1\u01a0\15\0\42\u0106\1\u01a1\1\u0169\52\u0106\43\u0109\1\u016a"+
    "\1\u01a2\51\u0109\1\0\11\24\2\0\6\24\1\0\7\24"+
    "\1\0\2\24\1\0\4\24\7\0\4\24\1\u01a3\4\0"+
    "\4\24\1\0\1\24\7\0\1\24\1\0\4\24\11\0"+
    "\60\u014d\1\u01a4\35\u014d\64\0\1\u01a5\114\0\1\u01a6\32\0"+
    "\42\u0123\1\u01a7\1\u017b\52\u0123\43\u0124\1\u017c\1\u01a8\51\u0124"+
    "\42\u0128\1\u01a9\1\u0181\52\u0128\43\u012b\1\u0182\1\u01aa\51\u012b"+
    "\13\106\1\0\6\106\1\u01ab\23\106\1\0\47\106\21\0"+
    "\1\u01ac\75\0\11\24\2\0\6\24\1\0\7\24\1\0"+
    "\1\u01ad\1\24\1\0\4\24\7\0\5\24\4\0\4\24"+
    "\1\0\1\24\7\0\1\24\1\0\4\24\11\0\42\u0106"+
    "\1\u01ae\1\u0169\52\u0106\43\u0109\1\u016a\1\u01af\51\u0109\65\0"+
    "\1\u01b0\117\0\1\u01b1\26\0\42\u0123\1\u01b2\1\u017b\52\u0123"+
    "\43\u0124\1\u017c\1\u01b3\51\u0124\42\u0128\1\u01b4\1\u0181\52\u0128"+
    "\43\u012b\1\u0182\1\u01b5\51\u012b\13\u01b6\1\0\31\u01b6\2\u01ab"+
    "\23\u01b6\1\u01ab\23\u01b6\22\0\1\u01ab\127\0\1\u01b7\147\0"+
    "\1\u01b8\27\0\13\u01b6\1\0\32\u01b6\1\0\47\u01b6\60\u01b7"+
    "\1\u01a4\35\u01b7\70\u01b8\1\u01b9\115\u01b8\1\u01ba\105\u01b8\1\u01a4"+
    "\35\u01b8";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24024];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\3\0\5\1\4\0\1\11\15\1\1\11"+
    "\5\1\1\11\1\1\2\11\1\1\1\11\10\1\4\11"+
    "\1\1\3\11\1\1\1\11\6\1\4\11\22\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\1\1\11\7\1\1\11"+
    "\10\1\1\11\13\1\6\11\3\1\2\11\5\1\4\0"+
    "\1\11\1\1\1\0\1\11\6\1\1\0\14\1\1\11"+
    "\3\1\1\11\3\1\1\11\7\1\2\11\1\1\1\11"+
    "\1\1\3\11\4\1\1\11\1\1\4\11\1\0\1\11"+
    "\4\1\3\0\1\11\12\1\2\0\2\1\1\11\2\1"+
    "\1\0\3\1\1\11\3\1\1\0\1\1\1\0\4\1"+
    "\1\0\6\1\1\0\14\1\1\11\1\0\7\1\3\11"+
    "\4\1\1\11\4\1\4\0\2\1\1\11\3\1\1\0"+
    "\2\1\1\11\1\0\1\1\1\11\1\1\2\0\3\1"+
    "\1\0\7\1\1\0\2\1\1\0\14\1\1\0\1\11"+
    "\14\0\2\1\1\0\1\1\2\0\3\1\1\0\5\1"+
    "\1\0\2\1\1\0\11\1\6\0\2\1\4\0\2\1"+
    "\1\0\3\1\1\0\12\1\3\0\1\11\6\1\1\0"+
    "\1\1\1\11\1\0\1\11\2\0\1\1\1\11\6\0"+
    "\1\1\1\0\3\1\2\0\5\1\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = IN_PYXL_DOCUMENT;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
private void enterState(int state) {
    stateStack.push(new State(zzLexicalState, embedBraceCount));
    yybegin(state);
    embedBraceCount = 0;
}
private boolean exitState() {
    int size = stateStack.size();
    if (size <= 0) {
        yybegin(IN_PYXL_DOCUMENT);
        return false;   // error condition
    } else {
        State mystate = stateStack.pop();
        yybegin(mystate.lexState);
        embedBraceCount = mystate.embedBraceCount;
        return true;
    }
}

// Counter for keeping track of when an embed statement ends, as opposed to when inner braces closes.
int embedBraceCount = 0;

class State {
    public int lexState;
    public int embedBraceCount;

    State (int lexState, int embedBraceCount) {
        this.lexState = lexState;
        this.embedBraceCount = embedBraceCount;
    }
}
Stack<State> stateStack = new Stack<State>();


private int getSpaceLength(CharSequence string) {
String string1 = string.toString();
string1 = StringUtil.trimEnd(string1, "\\");
string1 = StringUtil.trimEnd(string1, ";");
final String s = StringUtil.trimTrailing(string1);
return yylength()-s.length();

}



  _PyxlLexer(java.io.Reader in) {
    this.zzReader = in;
//    Logger LOGGER = Logger.getInstance(_PyxlLexer.class);
//    LOGGER.warn("Instantiated _PyxlLexer");
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _PyxlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 4936) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 115: 
          { return PyTokenTypes.YIELD_KEYWORD;
          }
        case 127: break;
        case 56: 
          { return exitState() ? PyxlTokenTypes.TAGEND : PyxlTokenTypes.BADCHAR;
          }
        case 128: break;
        case 6: 
          { return PyTokenTypes.INTEGER_LITERAL;
          }
        case 129: break;
        case 19: 
          { return PyTokenTypes.DIV;
          }
        case 130: break;
        case 31: 
          { return PyTokenTypes.PERC;
          }
        case 131: break;
        case 13: 
          { return PyTokenTypes.BACKSLASH;
          }
        case 132: break;
        case 37: 
          { return PyTokenTypes.RPAR;
          }
        case 133: break;
        case 5: 
          { return PyTokenTypes.BAD_CHARACTER;
          }
        case 134: break;
        case 26: 
          { return PyTokenTypes.LBRACE;
          }
        case 135: break;
        case 92: 
          { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.DEF_KEYWORD;
          }
        case 136: break;
        case 112: 
          { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.CLASS_KEYWORD;
          }
        case 137: break;
        case 104: 
          { yypushback(getSpaceLength(yytext())); return PyTokenTypes.DOCSTRING;
          }
        case 138: break;
        case 16: 
          { return PyTokenTypes.MINUS;
          }
        case 139: break;
        case 48: 
          { exitState(); return PyxlTokenTypes.ATTRVALUE_END;
          }
        case 140: break;
        case 12: 
          { if (zzInput == YYEOF && zzStartRead == 0) return PyTokenTypes.DOCSTRING;
                                 else return PyTokenTypes.SINGLE_QUOTED_STRING;
          }
        case 141: break;
        case 42: 
          { return PyxlTokenTypes.BADCHAR;
          }
        case 142: break;
        case 15: 
          { if (zzCurrentPos == 0) enterState(PENDING_DOCSTRING); return PyTokenTypes.LINE_BREAK;
          }
        case 143: break;
        case 111: 
          { return PyTokenTypes.BREAK_KEYWORD;
          }
        case 144: break;
        case 22: 
          { return PyTokenTypes.RBRACKET;
          }
        case 145: break;
        case 10: 
          { return PyTokenTypes.DOT;
          }
        case 146: break;
        case 7: 
          { return PyTokenTypes.IDENTIFIER;
          }
        case 147: break;
        case 36: 
          { return PyTokenTypes.LPAR;
          }
        case 148: break;
        case 18: 
          { return PyTokenTypes.LT;
          }
        case 149: break;
        case 57: 
          { yypushback(1); exitState();
          }
        case 150: break;
        case 85: 
          { yybegin(IN_ATTR); return PyxlTokenTypes.BUILT_IN_TAG;
          }
        case 151: break;
        case 62: 
          { return PyTokenTypes.IN_KEYWORD;
          }
        case 152: break;
        case 114: 
          { return PyTokenTypes.RAISE_KEYWORD;
          }
        case 153: break;
        case 99: 
          { return PyTokenTypes.GTGTEQ;
          }
        case 154: break;
        case 24: 
          { return PyTokenTypes.SPACE;
          }
        case 155: break;
        case 41: 
          { enterState(IN_PYXL_PYTHON_EMBED); return PyxlTokenTypes.EMBED_START;
          }
        case 156: break;
        case 86: 
          { return exitState() ? PyxlTokenTypes.TAGENDANDCLOSE : PyxlTokenTypes.BADCHAR;
          }
        case 157: break;
        case 121: 
          { return PyTokenTypes.EXCEPT_KEYWORD;
          }
        case 158: break;
        case 60: 
          { return PyTokenTypes.IMAGINARY_LITERAL;
          }
        case 159: break;
        case 45: 
          { return PyTokenTypes.SINGLE_QUOTED_STRING;
          }
        case 160: break;
        case 46: 
          { embedBraceCount++; return PyTokenTypes.LBRACE;
          }
        case 161: break;
        case 95: 
          { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.SINGLE_QUOTED_STRING;
 enterState(PENDING_DOCSTRING); return PyTokenTypes.DOCSTRING;
          }
        case 162: break;
        case 49: 
          { yybegin(IN_PYXL_BLOCK); return PyxlTokenTypes.TAGEND;
          }
        case 163: break;
        case 84: 
          { yypushback(1); return PyxlTokenTypes.TAGNAME_MODULE;
          }
        case 164: break;
        case 27: 
          { return PyTokenTypes.FORMFEED;
          }
        case 165: break;
        case 50: 
          { enterState(IN_ATTRVALUE); return PyTokenTypes.EQ;
          }
        case 166: break;
        case 29: 
          { return PyTokenTypes.SEMICOLON;
          }
        case 167: break;
        case 20: 
          { return PyTokenTypes.GT;
          }
        case 168: break;
        case 21: 
          { return PyTokenTypes.LBRACKET;
          }
        case 169: break;
        case 9: 
          { return PyTokenTypes.COLON;
          }
        case 170: break;
        case 58: 
          { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                 else exitState(); return PyTokenTypes.SINGLE_QUOTED_STRING;
          }
        case 171: break;
        case 97: 
          { return PyTokenTypes.LTLTEQ;
          }
        case 172: break;
        case 106: 
          { return PyTokenTypes.ELSE_KEYWORD;
          }
        case 173: break;
        case 33: 
          { return PyTokenTypes.OR;
          }
        case 174: break;
        case 3: 
          { return PyxlTokenTypes.ATTRVALUE;
          }
        case 175: break;
        case 94: 
          { if (zzInput == YYEOF && zzStartRead == 0) return PyTokenTypes.DOCSTRING;
                                 else return PyTokenTypes.TRIPLE_QUOTED_STRING;
          }
        case 176: break;
        case 89: 
          { yypushback(yylength()-1); enterState(PENDING_DOCSTRING); return PyTokenTypes.COLON;
          }
        case 177: break;
        case 77: 
          { return PyTokenTypes.MULTEQ;
          }
        case 178: break;
        case 124: 
          { return PyTokenTypes.FINALLY_KEYWORD;
          }
        case 179: break;
        case 116: 
          { return PyTokenTypes.WHILE_KEYWORD;
          }
        case 180: break;
        case 55: 
          { return PyxlTokenTypes.TAGNAME;
          }
        case 181: break;
        case 30: 
          { return PyTokenTypes.MULT;
          }
        case 182: break;
        case 117: 
          { return PyTokenTypes.ASSERT_KEYWORD;
          }
        case 183: break;
        case 71: 
          { return PyTokenTypes.FLOORDIV;
          }
        case 184: break;
        case 120: 
          { return PyTokenTypes.GLOBAL_KEYWORD;
          }
        case 185: break;
        case 52: 
          { yybegin(ATTR_VALUE_1Q); return PyxlTokenTypes.ATTRVALUE_START;
          }
        case 186: break;
        case 118: 
          { return PyTokenTypes.LAMBDA_KEYWORD;
          }
        case 187: break;
        case 82: 
          { return PyTokenTypes.XOREQ;
          }
        case 188: break;
        case 100: 
          { return PyTokenTypes.FOR_KEYWORD;
          }
        case 189: break;
        case 38: 
          { return PyTokenTypes.AT;
          }
        case 190: break;
        case 93: 
          { return PyTokenTypes.NOT_KEYWORD;
          }
        case 191: break;
        case 11: 
          { return PyTokenTypes.PLUS;
          }
        case 192: break;
        case 67: 
          { return PyTokenTypes.MINUSEQ;
          }
        case 193: break;
        case 83: 
          { yypushback(yylength());
        enterState(PENDING_PYXL_TAG_FROM_PYTHON);
          }
        case 194: break;
        case 113: 
          { return PyTokenTypes.PRINT_KEYWORD;
          }
        case 195: break;
        case 75: 
          { return PyTokenTypes.NE;
          }
        case 196: break;
        case 17: 
          { return PyTokenTypes.COMMA;
          }
        case 197: break;
        case 53: 
          { yybegin(ATTR_VALUE_2Q); return PyxlTokenTypes.ATTRVALUE_START;
          }
        case 198: break;
        case 78: 
          { return PyTokenTypes.EXP;
          }
        case 199: break;
        case 76: 
          { return PyTokenTypes.EQEQ;
          }
        case 200: break;
        case 23: 
          { return PyTokenTypes.TICK;
          }
        case 201: break;
        case 1: 
          { return PyxlTokenTypes.STRING;
          }
        case 202: break;
        case 102: 
          { return PyTokenTypes.TRIPLE_QUOTED_STRING;
          }
        case 203: break;
        case 126: 
          { return PyTokenTypes.CONTINUE_KEYWORD;
          }
        case 204: break;
        case 125: 
          { // Look for # coding: pyxl
        if(zzCurrentPos == 0) {
            Logger LOGGER = Logger.getInstance(_PyxlLexer.class);
            LOGGER.warn("entering state IN_PYXL_DOCUMENT!!!");
            enterState(IN_PYXL_DOCUMENT);
            return PyTokenTypes.END_OF_LINE_COMMENT;
        }
          }
        case 205: break;
        case 68: 
          { return PyTokenTypes.LTLT;
          }
        case 206: break;
        case 70: 
          { return PyTokenTypes.LE;
          }
        case 207: break;
        case 2: 
          { exitState(); return PyxlTokenTypes.ATTRVALUE;
          }
        case 208: break;
        case 90: 
          { return PyTokenTypes.AND_KEYWORD;
          }
        case 209: break;
        case 43: 
          { yybegin(IN_ATTR); return PyxlTokenTypes.TAGNAME;
          }
        case 210: break;
        case 4: 
          { return PyxlTokenTypes.ATTRNAME;
          }
        case 211: break;
        case 47: 
          { if (embedBraceCount-- == 0) {
                               exitState();
                               return PyxlTokenTypes.EMBED_END;
                           } else {
                               return PyTokenTypes.RBRACE;
                           }
          }
        case 212: break;
        case 61: 
          { return PyTokenTypes.OR_KEYWORD;
          }
        case 213: break;
        case 54: 
          { yybegin(IN_PYXL_PYTHON_EMBED); return PyxlTokenTypes.EMBED_START;
          }
        case 214: break;
        case 40: 
          { if (zzLexicalState == PENDING_PYXL_TAG_FROM_PYTHON) {
            yybegin(IN_PYXL_TAG_NAME);
        } else {
            enterState(IN_PYXL_TAG_NAME);
        }
        return PyxlTokenTypes.TAGBEGIN;
          }
        case 215: break;
        case 8: 
          { if (zzCurrentPos == 0) enterState(PENDING_DOCSTRING); return PyTokenTypes.END_OF_LINE_COMMENT;
          }
        case 216: break;
        case 66: 
          { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.SINGLE_QUOTED_STRING;
return PyTokenTypes.DOCSTRING;
          }
        case 217: break;
        case 108: 
          { return PyTokenTypes.PASS_KEYWORD;
          }
        case 218: break;
        case 103: 
          { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                 else exitState(); return PyTokenTypes.TRIPLE_QUOTED_STRING;
          }
        case 219: break;
        case 39: 
          { return PyTokenTypes.END_OF_LINE_COMMENT;
          }
        case 220: break;
        case 123: 
          { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.TRIPLE_QUOTED_STRING;
return PyTokenTypes.DOCSTRING;
          }
        case 221: break;
        case 81: 
          { return PyTokenTypes.OREQ;
          }
        case 222: break;
        case 73: 
          { return PyTokenTypes.GTGT;
          }
        case 223: break;
        case 32: 
          { return PyTokenTypes.AND;
          }
        case 224: break;
        case 110: 
          { yybegin(IN_CLOSE_TAG); yypushback(yylength()-2); return PyxlTokenTypes.TAGCLOSE;
          }
        case 225: break;
        case 72: 
          { return PyTokenTypes.DIVEQ;
          }
        case 226: break;
        case 122: 
          { return PyTokenTypes.RETURN_KEYWORD;
          }
        case 227: break;
        case 107: 
          { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.TRIPLE_QUOTED_STRING;
 enterState(PENDING_DOCSTRING); return PyTokenTypes.DOCSTRING;
          }
        case 228: break;
        case 119: 
          { return PyTokenTypes.IMPORT_KEYWORD;
          }
        case 229: break;
        case 74: 
          { return PyTokenTypes.GE;
          }
        case 230: break;
        case 65: 
          { return PyTokenTypes.PLUSEQ;
          }
        case 231: break;
        case 87: 
          { return PyxlTokenTypes.BUILT_IN_TAG;
          }
        case 232: break;
        case 63: 
          { return PyTokenTypes.IS_KEYWORD;
          }
        case 233: break;
        case 51: 
          { yypushback(1); yybegin(ATTR_VALUE_UNQUOTED);
          }
        case 234: break;
        case 98: 
          { return PyTokenTypes.FLOORDIVEQ;
          }
        case 235: break;
        case 59: 
          { return PyTokenTypes.FLOAT_LITERAL;
          }
        case 236: break;
        case 44: 
          { return PyTokenTypes.LINE_BREAK;
          }
        case 237: break;
        case 79: 
          { return PyTokenTypes.PERCEQ;
          }
        case 238: break;
        case 96: 
          { return PyTokenTypes.TRY_KEYWORD;
          }
        case 239: break;
        case 80: 
          { return PyTokenTypes.ANDEQ;
          }
        case 240: break;
        case 25: 
          { return PyTokenTypes.EQ;
          }
        case 241: break;
        case 109: 
          { return PyTokenTypes.FROM_KEYWORD;
          }
        case 242: break;
        case 101: 
          { return PyTokenTypes.EXPEQ;
          }
        case 243: break;
        case 105: 
          { return PyTokenTypes.ELIF_KEYWORD;
          }
        case 244: break;
        case 88: 
          { yypushback(getSpaceLength(yytext())); exitState(); return PyTokenTypes.DOCSTRING;
          }
        case 245: break;
        case 28: 
          { return PyTokenTypes.RBRACE;
          }
        case 246: break;
        case 64: 
          { return PyTokenTypes.IF_KEYWORD;
          }
        case 247: break;
        case 14: 
          { return PyTokenTypes.TAB;
          }
        case 248: break;
        case 69: 
          { return PyTokenTypes.NE_OLD;
          }
        case 249: break;
        case 35: 
          { return PyTokenTypes.TILDE;
          }
        case 250: break;
        case 91: 
          { return PyTokenTypes.DEL_KEYWORD;
          }
        case 251: break;
        case 34: 
          { return PyTokenTypes.XOR;
          }
        case 252: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
